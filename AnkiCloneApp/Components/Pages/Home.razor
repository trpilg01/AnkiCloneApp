@page "/"
@rendermode InteractiveServer
@using AnkiCloneApp.Data
@inject DataService DataService
@inject NavigationManager NavigationManager

<style>
    .no-bullets {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }
    body, html{
    height: 100%;
    margin: 0;
        background: linear-gradient(to top right, rgba(139,57,255,0.87) , rgba(13,12,89,0.87));
    }
    .full-width-table{
        width: 100%;
        table-layout: fixed; 
        margin: 0;
        max-width: fit-content(100%);
    }
</style>

<PageTitle>Home</PageTitle>

<h3 style="text-align: center; text-decoration: underline"></h3>

<div class="container" style="padding: 5px; background-color: white; border-radius: 20px; width: fit-content; box-shadow: 5px 5px 15px rgba(0,0,0,0.2)">
    <h4 style="padding: 5px;font-family: FreeSans,sans-serif;text-align: center; text-decoration: underline">Decks</h4>
    
    <div style="text-align: center">    
        <button @onclick="ToggleAddDeckVisibility" style="padding:5px; box-shadow: 5px 5px 15px rgba(0,0,0,0.2) ;text-align: center;background-color: rgba(139,57,255,0.87); border-radius: 10px">Add Deck</button>
    </div>
    @if (_showAddDeckField)
    {
        <div class="button-container">
            <form>
                <div>
                    <label for="_addDeckName" style="background-color: gray;text-decoration: rgba(236,235,236,0.87)">Name</label>
                    <input type="text" id="_addDeckName" @bind="_addDeckName"/>
                </div>
                <button @onclick="SubmitDeck" type="submit">Enter</button>
            </form>
        </div>
    }

    <table class="table" style="background-color: white;">
        <thead>
        <tr style="max-width: inherit; text-decoration: underline">
            <th style="padding-right: 75px; padding-left: 75px">Deck</th>
            <th style="padding-right: 75px; padding-left: 75px">Due</th>
            <th style="padding-right: 75px; padding-left: 75px">Deck Size</th>
            <th style="padding-right: 75px; padding-left: 75px">Review</th>
        </tr>
        </thead>
        <tbody>
        
        @if (_deckService != null) // Load after short delay 
        {
            @foreach (var deck in _deckService.DeckList)
            {
                <tr style="width: 100%">
                    
                    <td style="text-align: center">@deck.Name</td>

                    <!-- Cards Due -->
                    @if (deck.DueToday != null)
                    {
                        <td style="text-align: center">@deck.DueToday.Count</td>
                    }
                    else
                    {
                        <td style="text-align: center">None</td>
                    }

                    <!-- Deck Size -->
                    <td style="text-align: center">@deck.Cards.Count</td>

                    <!-- Review Button -->
                    <td class="btn-link" @onclick="() => ReviewDeck(deck.DeckId)" style="text-align: center">Review</td>
                </tr>
            }
        }
        else
        {
            <tr>Loading...</tr>
        }
        
        </tbody>
    </table>
</div>


@code{
    
    private string _addDeckName = "";
    private bool _showAddDeckField = false;
    private DeckService _deckService; // Could possibly remove DeckService class all together.
    
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        _deckService = new DeckService { DeckList = await DataService.GetDecksAsync() };

        foreach (var deck in _deckService.DeckList)
        {
            deck.Cards = await DataService.GetFlashCardsAsync(deck.DeckId);
            deck.DueToday = deck.GetDueToday(); 
        }
    }
    
    void ToggleAddDeckVisibility()
    {
        _showAddDeckField = true;
    }

    void SubmitDeck()
    {
        DataService.AddDeck(_addDeckName);
    }

    void ReviewDeck(int selectedDeckId)
    {
        NavigationManager.NavigateTo($"/review/{selectedDeckId}");
    }
}
